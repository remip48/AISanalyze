% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/03a_AISinterpolate_at.R
\name{AISinterpolate_at}
\alias{AISinterpolate_at}
\title{Interpolate AIS data at the desired times.}
\usage{
AISinterpolate_at(
  data,
  ais_data,
  mmsi_time_to_order = T,
  load_existing_files = F,
  save_AISinterlate_at = T,
  overwrite = F,
  file_AISinterlate_at = "AISinterpolate_at",
  radius = 2e+05,
  time_stop = 5 * 60 * 60,
  correct_speed = T,
  threshold_speed_to_correct = 100,
  threshold_speed_to_correct_expr = function(speed_kmh) {
    
    return((median(speed_kmh[speed_kmh > 1], na.rm = T) + sd(speed_kmh[speed_kmh > 1 &
    speed_kmh < quantile(speed_kmh[speed_kmh > 1], 0.75)]) * 5 + 15))
 },
  filter_station = T,
  filter_high_speed = T,
  quantile_station = 0.975,
  threshold_distance_station = 1,
  quantile_high_speed = 0.97,
  threshold_high_speed = 110,
  parallelize = F,
  nb_cores = NA,
  outfile = "log.txt",
  QUIET = F
)
}
\arguments{
\item{data}{Data of interest for the extraction of AIS. Must contain a column: timestamp (number of seconds since January 1, 1970 (the Unix epoch): see https://r-lang.com/how-to-convert-date-to-numeric-format-in-r/ for transformation), and the columns lon (longitude) & lat (latitude). timestamp, lon and lat must be numeric.}

\item{ais_data}{AIS data. Must contain a column: timestamp (number of seconds since January 1, 1970 (the Unix epoch): see https://r-lang.com/how-to-convert-date-to-numeric-format-in-r/ for transformation), and the columns lon (longitude), lat (latitude) and mmsi (Maritime mobile service identity). timestamp, lon and lat must be numeric. The mmsi column is the identifier for the vessels, the values can be replaced by the IMO or another identifier, but the name of the column must be mmsi.}

\item{mmsi_time_to_order}{if MMSI and timestamps are not yet arranged as dplyr::arrange(AIS data, mmsi, timestamp), must be TRUE. We recommand to put it as TRUE by precaution. Important to prevent large errors.}

\item{load_existing_files}{if TRUE, load the existing files of AISinterpolate_at named as paste0(file_AISinterlate_at, "\emph{hour}", hour_processed, ".rds).}

\item{save_AISinterlate_at}{if TRUE, save the results for each iteration of hour of AIS data (if run_AISinterpolate_at = T)}

\item{overwrite}{if TRUE, the saved files (see save_AIStravel, save_AISinterlate_at, save_AISextract_perHour) overwrite existing files. Otherwise load the existing files if these are existing and needed in the function.}

\item{file_AISinterlate_at}{if save_AISinterlate_at = TRUE, is the file name where hourly interpolated AIS data are saved. Must not contain file format: the files are written as .rds.}

\item{radius}{radius (meters) around data where AIS data are considered for interpolation of the positions. Must be large enough to collect the AIS data necessary for a linear interpolation at the time of the data. Is used also to filter the AIS data too far from the data of interest and slowing the processes (we used 200 km as default value of radius).}

\item{time_stop}{number of seconds before and after the AIS signal were the vessel track is not calculated/interpolated anymore if there is not another AIS signal meanwhile. Filter also AIS data too long before and after that are not of interest, to accelerate a lot the process.}

\item{correct_speed}{if TRUE, GPS errors and GPS delays are identified and removed from AIS data. Vessel speeds, distance and time travelled are corrected. Usually necessary.}

\item{threshold_speed_to_correct}{threshold (km/h) above which speeds are considered as unrealistic and due to a GPS error or delay.}

\item{threshold_speed_to_correct_expr}{expression (function having "speed_kmh" as unique parameter) to determine another threshold correcting GPS errors and delays. This expression is ran for each MMSI individually, allowing to identify unrealistic speeds based on the mean of the vessel speed, median, standard deviation or other functions. The default expression has been tested as relevant and appropriate to filter GPS errors and delays, still checks are necessary.}

\item{filter_station}{if TRUE, filter the stations out.}

\item{filter_high_speed}{if TRUE, filter the aircraft out.}

\item{quantile_station}{Quantile (0 to 1) of distance, by mmsi, which is compared to threshold_distance_station to assess if the MMSI is a station or not: if below threshold_distance_station, MMSI is considered as stationary and is a station. We used 0.975 to prevent misinterpretations from GPS errors leading to distance travelled by stations.}

\item{threshold_distance_station}{Threshold of distance (meters) used to assess if the MMSI is a station.}

\item{quantile_high_speed}{Quantile (0 to 1) of speed, by mmsi, which is compared to threshold_high_speed to assess if the MMSI is a aircraft or not: if above threshold_high_speed, MMSI is considered as a station. We used 0.97 to prevent misinterpretations from GPS errors.}

\item{threshold_high_speed}{Threshold of speed (km/h) used to assess if the MMSI is an aircraft.}

\item{parallelize}{if TRUE, parallelize with "doParallel" package the processes (required powerful computer if large AIS dataset and data timestamps to process.)}

\item{nb_cores}{number of cores to used with doParallel.}

\item{outfile}{file to print the logs if parallelize = T.}

\item{QUIET}{if TRUE, print the iterations: either in the console if parallelize = F, or in the file "outfile" if parallelize = T.}
}
\value{
return AIS data at the timestamps desired, interpolated (or not). Contains the columns:
\itemize{
\item id_ais_data_initial: identifier of the row in the ordered, corrected and cleaned ais data. Used for internal computation. For interpolated positions, id_ais_data_initial is the same than the next real existing AIS data.
\item station: if TRUE, the MMSI has been identified as a station.
\item high_speed: if TRUE, the MMSI has been identified as an high speed craft (specially used for aircraft).
\item any_NA_speed_kmh: if TRUE, at least one of the speeds of this MMSI has a speed as NA (so distance_travelled or time_travelled has a issue and the AIS data must be checked). Should not occur.
\item n_point_mmsi_initial_data: number of point of the MMSI in the AIS data after have removed the points with inexisting longitude and latitude.
\item id_mmsi_point_initial: identifier for the MMSI point after ordering, correcting and cleaning.
\item speed_kmh_corrected: if TRUE, the speed of the line has been corrected.
\item interpolated: if TRUE, this MMSI position has been interpolated.}
}
\description{
Interpolate AIS data at the desired times, after have corrected the GPS errors and delays (correcting the speed, distance and time travelled by the vessels), identified (and filter or not) the stations and aircraft, with possible time approximation if the computation time is too long.
}
\examples{
\dontrun{
data("ais")
data("point_to_extract")

library(dplyr)
library(lubridate)
point_to_extract <- point_to_extract \%>\%
  mutate(timestamp = as.numeric(ymd_hm(datetime)))
ais <- ais \%>\%
  mutate(timestamp = as.numeric(ymd_hms(datetime))) \%>\%
  AIStravel(ais_data = .,
            time_stop = 5*60*60,
            mmsi_time_to_order = T,
            return_sf = F,
            return_3035_coords = F)

AISinterpolate_at(data = point_to_extract,
                  ais_data = ais,
                  mmsi_time_to_order = T,
                  load_existing_files = T,
                  save_AISinterlate_at = T,
                  overwrite = F,
                  file_AISinterlate_at = "AISinterpolate_at",
                  radius = 200000,
                  time_stop = 5*60*60,
                  correct_speed = T,
                  threshold_speed_to_correct = 100,
                  filter_station = T,
                  filter_high_speed = T,
                  parallelize = F)}
}
